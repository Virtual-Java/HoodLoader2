
BootloaderDFU.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00003dba  00000e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dba  00003000  00003000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00003fa0  00003fa0  00000ef6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00003fe0  00003fe0  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00003ff8  00003ff8  00000f26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001d  00800168  00800168  00000f2e  2**0
                  ALLOC
  6 .noinit       00000002  00800185  00800185  00000f2e  2**0
                  ALLOC
  7 .comment      00000011  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 00000248  00000000  00000000  00000f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004212  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001656  00000000  00000000  000053da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000027f4  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000478  00000000  00000000  00009224  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001be6  00000000  00000000  0000969c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000019ef  00000000  00000000  0000b282  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0000cc78  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <__vectors>:
    3000:	39 c0       	rjmp	.+114    	; 0x3074 <__ctors_end>
    3002:	00 00       	nop
    3004:	71 c0       	rjmp	.+226    	; 0x30e8 <__bad_interrupt>
    3006:	00 00       	nop
    3008:	6f c0       	rjmp	.+222    	; 0x30e8 <__bad_interrupt>
    300a:	00 00       	nop
    300c:	6d c0       	rjmp	.+218    	; 0x30e8 <__bad_interrupt>
    300e:	00 00       	nop
    3010:	6b c0       	rjmp	.+214    	; 0x30e8 <__bad_interrupt>
    3012:	00 00       	nop
    3014:	69 c0       	rjmp	.+210    	; 0x30e8 <__bad_interrupt>
    3016:	00 00       	nop
    3018:	67 c0       	rjmp	.+206    	; 0x30e8 <__bad_interrupt>
    301a:	00 00       	nop
    301c:	65 c0       	rjmp	.+202    	; 0x30e8 <__bad_interrupt>
    301e:	00 00       	nop
    3020:	63 c0       	rjmp	.+198    	; 0x30e8 <__bad_interrupt>
    3022:	00 00       	nop
    3024:	61 c0       	rjmp	.+194    	; 0x30e8 <__bad_interrupt>
    3026:	00 00       	nop
    3028:	5f c0       	rjmp	.+190    	; 0x30e8 <__bad_interrupt>
    302a:	00 00       	nop
    302c:	56 c5       	rjmp	.+2732   	; 0x3ada <__vector_11>
    302e:	00 00       	nop
    3030:	5b c0       	rjmp	.+182    	; 0x30e8 <__bad_interrupt>
    3032:	00 00       	nop
    3034:	59 c0       	rjmp	.+178    	; 0x30e8 <__bad_interrupt>
    3036:	00 00       	nop
    3038:	57 c0       	rjmp	.+174    	; 0x30e8 <__bad_interrupt>
    303a:	00 00       	nop
    303c:	55 c0       	rjmp	.+170    	; 0x30e8 <__bad_interrupt>
    303e:	00 00       	nop
    3040:	53 c0       	rjmp	.+166    	; 0x30e8 <__bad_interrupt>
    3042:	00 00       	nop
    3044:	51 c0       	rjmp	.+162    	; 0x30e8 <__bad_interrupt>
    3046:	00 00       	nop
    3048:	d5 c1       	rjmp	.+938    	; 0x33f4 <__vector_18>
    304a:	00 00       	nop
    304c:	4d c0       	rjmp	.+154    	; 0x30e8 <__bad_interrupt>
    304e:	00 00       	nop
    3050:	4b c0       	rjmp	.+150    	; 0x30e8 <__bad_interrupt>
    3052:	00 00       	nop
    3054:	49 c0       	rjmp	.+146    	; 0x30e8 <__bad_interrupt>
    3056:	00 00       	nop
    3058:	47 c0       	rjmp	.+142    	; 0x30e8 <__bad_interrupt>
    305a:	00 00       	nop
    305c:	45 c0       	rjmp	.+138    	; 0x30e8 <__bad_interrupt>
    305e:	00 00       	nop
    3060:	43 c0       	rjmp	.+134    	; 0x30e8 <__bad_interrupt>
    3062:	00 00       	nop
    3064:	41 c0       	rjmp	.+130    	; 0x30e8 <__bad_interrupt>
    3066:	00 00       	nop
    3068:	3f c0       	rjmp	.+126    	; 0x30e8 <__bad_interrupt>
    306a:	00 00       	nop
    306c:	3d c0       	rjmp	.+122    	; 0x30e8 <__bad_interrupt>
    306e:	00 00       	nop
    3070:	3b c0       	rjmp	.+118    	; 0x30e8 <__bad_interrupt>
    3072:	00 00       	nop

00003074 <__ctors_end>:
    3074:	11 24       	eor	r1, r1
    3076:	1f be       	out	0x3f, r1	; 63
    3078:	cf ef       	ldi	r28, 0xFF	; 255
    307a:	d2 e0       	ldi	r29, 0x02	; 2
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	cd bf       	out	0x3d, r28	; 61

00003080 <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    3080:	04 b6       	in	r0, 0x34	; 52
    3082:	03 fe       	sbrs	r0, 3
    3084:	1c c0       	rjmp	.+56     	; 0x30be <__do_copy_data>
    3086:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <__bss_end>
    308a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <__bss_end+0x1>
    308e:	82 34       	cpi	r24, 0x42	; 66
    3090:	9c 4d       	sbci	r25, 0xDC	; 220
    3092:	a9 f4       	brne	.+42     	; 0x30be <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
    3094:	84 b7       	in	r24, 0x34	; 52
    3096:	87 7f       	andi	r24, 0xF7	; 247
    3098:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	a8 95       	wdr
    30a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    30a4:	88 61       	ori	r24, 0x18	; 24
    30a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    30aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    30ae:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    30b0:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__bss_end+0x1>
    30b4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    30b8:	e0 e0       	ldi	r30, 0x00	; 0
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	09 95       	icall

000030be <__do_copy_data>:
    30be:	11 e0       	ldi	r17, 0x01	; 1
    30c0:	a0 e0       	ldi	r26, 0x00	; 0
    30c2:	b1 e0       	ldi	r27, 0x01	; 1
    30c4:	ea eb       	ldi	r30, 0xBA	; 186
    30c6:	fd e3       	ldi	r31, 0x3D	; 61
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <__do_copy_data+0x10>
    30ca:	05 90       	lpm	r0, Z+
    30cc:	0d 92       	st	X+, r0
    30ce:	a8 36       	cpi	r26, 0x68	; 104
    30d0:	b1 07       	cpc	r27, r17
    30d2:	d9 f7       	brne	.-10     	; 0x30ca <__do_copy_data+0xc>

000030d4 <__do_clear_bss>:
    30d4:	21 e0       	ldi	r18, 0x01	; 1
    30d6:	a8 e6       	ldi	r26, 0x68	; 104
    30d8:	b1 e0       	ldi	r27, 0x01	; 1
    30da:	01 c0       	rjmp	.+2      	; 0x30de <.do_clear_bss_start>

000030dc <.do_clear_bss_loop>:
    30dc:	1d 92       	st	X+, r1

000030de <.do_clear_bss_start>:
    30de:	a5 38       	cpi	r26, 0x85	; 133
    30e0:	b2 07       	cpc	r27, r18
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <.do_clear_bss_loop>
    30e4:	3e d1       	rcall	.+636    	; 0x3362 <main>
    30e6:	67 c6       	rjmp	.+3278   	; 0x3db6 <_exit>

000030e8 <__bad_interrupt>:
    30e8:	8b cf       	rjmp	.-234    	; 0x3000 <__vectors>

000030ea <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    30ea:	88 23       	and	r24, r24
    30ec:	a9 f0       	breq	.+42     	; 0x3118 <DiscardFillerBytes+0x2e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    30ee:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	{
		if (!(Endpoint_BytesInEndpoint()))
    30f2:	91 11       	cpse	r25, r1
    30f4:	0d c0       	rjmp	.+26     	; 0x3110 <DiscardFillerBytes+0x26>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    30f6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    30fa:	9b 7f       	andi	r25, 0xFB	; 251
    30fc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3100:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
    3104:	92 fd       	sbrc	r25, 2
    3106:	06 c0       	rjmp	.+12     	; 0x3114 <DiscardFillerBytes+0x2a>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    3108:	9e b3       	in	r25, 0x1e	; 30
    310a:	91 11       	cpse	r25, r1
    310c:	f9 cf       	rjmp	.-14     	; 0x3100 <DiscardFillerBytes+0x16>
    310e:	04 c0       	rjmp	.+8      	; 0x3118 <DiscardFillerBytes+0x2e>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    3110:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
    3114:	81 50       	subi	r24, 0x01	; 1
    3116:	e9 cf       	rjmp	.-46     	; 0x30ea <DiscardFillerBytes>
    3118:	08 95       	ret

0000311a <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
    311a:	e0 e7       	ldi	r30, 0x70	; 112
    311c:	f1 e0       	ldi	r31, 0x01	; 1
    311e:	35 81       	ldd	r19, Z+5	; 0x05
    3120:	24 81       	ldd	r18, Z+4	; 0x04
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <StartAddr>
    312a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <StartAddr+0x1>
	EndAddr   = Address[1].Word;
    312e:	c9 01       	movw	r24, r18
    3130:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <__data_end>
    3134:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__data_end+0x1>
    3138:	08 95       	ret

0000313a <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	27 97       	sbiw	r28, 0x07	; 7
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
	/* Check if device is in secure mode */
	if (IsSecure)
    3150:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <IsSecure>
    3154:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand>
    3158:	99 23       	and	r25, r25
    315a:	d1 f0       	breq	.+52     	; 0x3190 <ProcessBootloaderCommand+0x56>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    315c:	84 30       	cpi	r24, 0x04	; 4
    315e:	49 f4       	brne	.+18     	; 0x3172 <ProcessBootloaderCommand+0x38>
    3160:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    3164:	81 11       	cpse	r24, r1
    3166:	08 c0       	rjmp	.+16     	; 0x3178 <ProcessBootloaderCommand+0x3e>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
    3168:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SentCommand+0x2>
    316c:	8f 3f       	cpi	r24, 0xFF	; 255
    316e:	21 f4       	brne	.+8      	; 0x3178 <ProcessBootloaderCommand+0x3e>
    3170:	5a c0       	rjmp	.+180    	; 0x3226 <ProcessBootloaderCommand+0xec>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
    3172:	85 30       	cpi	r24, 0x05	; 5
    3174:	09 f4       	brne	.+2      	; 0x3178 <ProcessBootloaderCommand+0x3e>
    3176:	ac c0       	rjmp	.+344    	; 0x32d0 <ProcessBootloaderCommand+0x196>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
    3178:	8a e0       	ldi	r24, 0x0A	; 10
    317a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			DFU_Status = errWRITE;
    317e:	83 e0       	ldi	r24, 0x03	; 3
    3180:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <DFU_Status>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3184:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    3188:	80 62       	ori	r24, 0x20	; 32
    318a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    318e:	df c0       	rjmp	.+446    	; 0x334e <ProcessBootloaderCommand+0x214>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
    3190:	84 30       	cpi	r24, 0x04	; 4
    3192:	09 f4       	brne	.+2      	; 0x3196 <ProcessBootloaderCommand+0x5c>
    3194:	48 c0       	rjmp	.+144    	; 0x3226 <ProcessBootloaderCommand+0xec>
    3196:	28 f4       	brcc	.+10     	; 0x31a2 <ProcessBootloaderCommand+0x68>
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	51 f0       	breq	.+20     	; 0x31b0 <ProcessBootloaderCommand+0x76>
    319c:	83 30       	cpi	r24, 0x03	; 3
    319e:	f1 f0       	breq	.+60     	; 0x31dc <ProcessBootloaderCommand+0xa2>
    31a0:	d6 c0       	rjmp	.+428    	; 0x334e <ProcessBootloaderCommand+0x214>
    31a2:	85 30       	cpi	r24, 0x05	; 5
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <ProcessBootloaderCommand+0x6e>
    31a6:	94 c0       	rjmp	.+296    	; 0x32d0 <ProcessBootloaderCommand+0x196>
    31a8:	86 30       	cpi	r24, 0x06	; 6
    31aa:	09 f4       	brne	.+2      	; 0x31ae <ProcessBootloaderCommand+0x74>
    31ac:	c4 c0       	rjmp	.+392    	; 0x3336 <ProcessBootloaderCommand+0x1fc>
    31ae:	cf c0       	rjmp	.+414    	; 0x334e <ProcessBootloaderCommand+0x214>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
    31b0:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <SentCommand+0x1>
    31b4:	12 30       	cpi	r17, 0x02	; 2
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <ProcessBootloaderCommand+0x80>
    31b8:	ca c0       	rjmp	.+404    	; 0x334e <ProcessBootloaderCommand+0x214>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    31ba:	af df       	rcall	.-162    	; 0x311a <LoadStartEndAddresses>

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
    31bc:	11 11       	cpse	r17, r1
    31be:	0c c0       	rjmp	.+24     	; 0x31d8 <ProcessBootloaderCommand+0x9e>
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    31c0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <StartAddr>
    31c4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <StartAddr+0x1>

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
    31c8:	23 e0       	ldi	r18, 0x03	; 3
    31ca:	fc 01       	movw	r30, r24
    31cc:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    31d0:	e8 95       	spm
			boot_spm_busy_wait();
    31d2:	07 b6       	in	r0, 0x37	; 55
    31d4:	00 fc       	sbrc	r0, 0
    31d6:	fd cf       	rjmp	.-6      	; 0x31d2 <ProcessBootloaderCommand+0x98>
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
    31d8:	85 e0       	ldi	r24, 0x05	; 5
    31da:	07 c0       	rjmp	.+14     	; 0x31ea <ProcessBootloaderCommand+0xb0>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
    31dc:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    31e0:	98 2f       	mov	r25, r24
    31e2:	9d 7f       	andi	r25, 0xFD	; 253
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
    31e4:	29 f4       	brne	.+10     	; 0x31f0 <ProcessBootloaderCommand+0xb6>
    31e6:	99 df       	rcall	.-206    	; 0x311a <LoadStartEndAddresses>

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
    31e8:	89 e0       	ldi	r24, 0x09	; 9
    31ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    31ee:	af c0       	rjmp	.+350    	; 0x334e <ProcessBootloaderCommand+0x214>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
    31f0:	81 30       	cpi	r24, 0x01	; 1
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <ProcessBootloaderCommand+0xbc>
    31f4:	ac c0       	rjmp	.+344    	; 0x334e <ProcessBootloaderCommand+0x214>
    31f6:	e0 e0       	ldi	r30, 0x00	; 0
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
    31fa:	84 91       	lpm	r24, Z
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	69 f0       	breq	.+26     	; 0x321a <ProcessBootloaderCommand+0xe0>
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
    3200:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Flash64KBPage>
				StartAddr     = CurrFlashAddress;
    3204:	f0 93 6b 01 	sts	0x016B, r31	; 0x80016b <StartAddr+0x1>
    3208:	e0 93 6a 01 	sts	0x016A, r30	; 0x80016a <StartAddr>

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
    320c:	8a e0       	ldi	r24, 0x0A	; 10
    320e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				DFU_Status = errCHECK_ERASED;
    3212:	85 e0       	ldi	r24, 0x05	; 5
    3214:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <DFU_Status>
    3218:	9a c0       	rjmp	.+308    	; 0x334e <ProcessBootloaderCommand+0x214>
    321a:	31 96       	adiw	r30, 0x01	; 1
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    321c:	e1 15       	cp	r30, r1
    321e:	20 e3       	ldi	r18, 0x30	; 48
    3220:	f2 07       	cpc	r31, r18
    3222:	59 f7       	brne	.-42     	; 0x31fa <ProcessBootloaderCommand+0xc0>
    3224:	94 c0       	rjmp	.+296    	; 0x334e <ProcessBootloaderCommand+0x214>
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
    3226:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    322a:	83 30       	cpi	r24, 0x03	; 3
    322c:	69 f5       	brne	.+90     	; 0x3288 <ProcessBootloaderCommand+0x14e>
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <WaitForExit>

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
    3234:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <SentCommand+0x6>
    3238:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <SentCommand+0x7>
    323c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SentCommand+0x2>
    3240:	23 2b       	or	r18, r19
    3242:	61 f0       	breq	.+24     	; 0x325c <ProcessBootloaderCommand+0x122>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	09 f0       	breq	.+2      	; 0x324a <ProcessBootloaderCommand+0x110>
    3248:	82 c0       	rjmp	.+260    	; 0x334e <ProcessBootloaderCommand+0x214>
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
    324a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SentCommand+0x5>
    324e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SentCommand+0x4>

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
    3252:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <AppStartPtr>
    3256:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <AppStartPtr+0x1>
    325a:	79 c0       	rjmp	.+242    	; 0x334e <ProcessBootloaderCommand+0x214>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
    325c:	81 11       	cpse	r24, r1
    325e:	11 c0       	rjmp	.+34     	; 0x3282 <ProcessBootloaderCommand+0x148>
			{
				/* Unlock the forced application start mode of the bootloader if it is restarted */
				MagicBootKey = MAGIC_BOOT_KEY;
    3260:	82 e4       	ldi	r24, 0x42	; 66
    3262:	9c ed       	ldi	r25, 0xDC	; 220
    3264:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <__bss_end+0x1>
    3268:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    326c:	9c e0       	ldi	r25, 0x0C	; 12
    326e:	88 e1       	ldi	r24, 0x18	; 24
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	a8 95       	wdr
    3276:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    3280:	66 c0       	rjmp	.+204    	; 0x334e <ProcessBootloaderCommand+0x214>
				wdt_enable(WDTO_250MS);
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
    3282:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
    3286:	63 c0       	rjmp	.+198    	; 0x334e <ProcessBootloaderCommand+0x214>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
    3288:	81 11       	cpse	r24, r1
    328a:	61 c0       	rjmp	.+194    	; 0x334e <ProcessBootloaderCommand+0x214>
    328c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SentCommand+0x2>
    3290:	8f 3f       	cpi	r24, 0xFF	; 255
    3292:	09 f0       	breq	.+2      	; 0x3296 <ProcessBootloaderCommand+0x15c>
    3294:	5c c0       	rjmp	.+184    	; 0x334e <ProcessBootloaderCommand+0x214>
    3296:	e0 e0       	ldi	r30, 0x00	; 0
    3298:	f0 e0       	ldi	r31, 0x00	; 0
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
    329a:	83 e0       	ldi	r24, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    329c:	95 e0       	ldi	r25, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
    329e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    32a2:	e8 95       	spm
			boot_spm_busy_wait();
    32a4:	07 b6       	in	r0, 0x37	; 55
    32a6:	00 fc       	sbrc	r0, 0
    32a8:	fd cf       	rjmp	.-6      	; 0x32a4 <ProcessBootloaderCommand+0x16a>
			boot_page_write(CurrFlashAddress);
    32aa:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    32ae:	e8 95       	spm
			boot_spm_busy_wait();
    32b0:	07 b6       	in	r0, 0x37	; 55
    32b2:	00 fc       	sbrc	r0, 0
    32b4:	fd cf       	rjmp	.-6      	; 0x32b0 <ProcessBootloaderCommand+0x176>
    32b6:	e0 58       	subi	r30, 0x80	; 128
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
    32ba:	e1 15       	cp	r30, r1
    32bc:	20 e3       	ldi	r18, 0x30	; 48
    32be:	f2 07       	cpc	r31, r18
    32c0:	71 f7       	brne	.-36     	; 0x329e <ProcessBootloaderCommand+0x164>

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
    32c2:	81 e1       	ldi	r24, 0x11	; 17
    32c4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    32c8:	e8 95       	spm

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
    32ca:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <IsSecure>
    32ce:	3f c0       	rjmp	.+126    	; 0x334e <ProcessBootloaderCommand+0x214>
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
    32d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader+0x1>
    32d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <RunBootloader+0x2>
    32d8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <RunBootloader+0x3>
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	af 83       	std	Y+7, r26	; 0x07
	const uint8_t SignatureInfo[4]  = {0x58, AVR_SIGNATURE_1, AVR_SIGNATURE_2, AVR_SIGNATURE_3};
    32e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <RunBootloader+0x4>
    32e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <RunBootloader+0x5>
    32ea:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <RunBootloader+0x6>
    32ee:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <RunBootloader+0x7>
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	ab 83       	std	Y+3, r26	; 0x03
    32f8:	bc 83       	std	Y+4, r27	; 0x04

	uint8_t DataIndexToRead = SentCommand.Data[1];
    32fa:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <SentCommand+0x2>

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                        // Read bootloader info
    32fe:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    3302:	81 11       	cpse	r24, r1
    3304:	05 c0       	rjmp	.+10     	; 0x3310 <ProcessBootloaderCommand+0x1d6>
	{
		ResponseByte = BootloaderInfo[DataIndexToRead];
    3306:	fe 01       	movw	r30, r28
    3308:	e2 0f       	add	r30, r18
    330a:	f1 1d       	adc	r31, r1
    330c:	85 81       	ldd	r24, Z+5	; 0x05
    330e:	10 c0       	rjmp	.+32     	; 0x3330 <ProcessBootloaderCommand+0x1f6>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	e9 f4       	brne	.+58     	; 0x334e <ProcessBootloaderCommand+0x214>
    3314:	82 2f       	mov	r24, r18
    3316:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (DataIndexToRead < 0x60)
    3318:	20 36       	cpi	r18, 0x60	; 96
    331a:	18 f4       	brcc	.+6      	; 0x3322 <ProcessBootloaderCommand+0x1e8>
		  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
    331c:	e1 ed       	ldi	r30, 0xD1	; 209
    331e:	ff ef       	ldi	r31, 0xFF	; 255
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <ProcessBootloaderCommand+0x1ec>
		else
		  ResponseByte = SignatureInfo[DataIndexToRead - 0x60 + 3];
    3322:	e4 ea       	ldi	r30, 0xA4	; 164
    3324:	ff ef       	ldi	r31, 0xFF	; 255
    3326:	ec 0f       	add	r30, r28
    3328:	fd 1f       	adc	r31, r29
    332a:	e8 0f       	add	r30, r24
    332c:	f9 1f       	adc	r31, r25
    332e:	80 81       	ld	r24, Z
    3330:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <ResponseByte>
    3334:	0c c0       	rjmp	.+24     	; 0x334e <ProcessBootloaderCommand+0x214>
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
    3336:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    333a:	83 30       	cpi	r24, 0x03	; 3
    333c:	41 f4       	brne	.+16     	; 0x334e <ProcessBootloaderCommand+0x214>
    333e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SentCommand+0x2>
    3342:	81 11       	cpse	r24, r1
    3344:	04 c0       	rjmp	.+8      	; 0x334e <ProcessBootloaderCommand+0x214>
			  Flash64KBPage = SentCommand.Data[2];
    3346:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <SentCommand+0x3>
    334a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Flash64KBPage>

			break;
	}
}
    334e:	27 96       	adiw	r28, 0x07	; 7
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	1f 91       	pop	r17
    3360:	08 95       	ret

00003362 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    3362:	84 b7       	in	r24, 0x34	; 52
    3364:	87 7f       	andi	r24, 0xF7	; 247
    3366:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	a8 95       	wdr
    336e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    3372:	88 61       	ori	r24, 0x18	; 24
    3374:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3378:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    337c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	80 e8       	ldi	r24, 0x80	; 128
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    338a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    338e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    3390:	c1 e0       	ldi	r28, 0x01	; 1
    3392:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    3398:	91 d3       	rcall	.+1826   	; 0x3abc <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
    339a:	8a b1       	in	r24, 0x0a	; 10
    339c:	80 63       	ori	r24, 0x30	; 48
    339e:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
    33a0:	8b b1       	in	r24, 0x0b	; 11
    33a2:	80 63       	ori	r24, 0x30	; 48
    33a4:	8b b9       	out	0x0b, r24	; 11
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    33a6:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = ((1 << CS11) | (1 << CS10));
    33aa:	83 e0       	ldi	r24, 0x03	; 3
    33ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
				PORTD |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD | LEDS_ALL_LEDS) & ~LEDMask);
    33b0:	8b b1       	in	r24, 0x0b	; 11
    33b2:	80 63       	ori	r24, 0x30	; 48
    33b4:	8f 7d       	andi	r24, 0xDF	; 223
    33b6:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    33b8:	78 94       	sei

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
    33ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
    33be:	88 23       	and	r24, r24
	  USB_USBTask();
    33c0:	11 f0       	breq	.+4      	; 0x33c6 <main+0x64>
    33c2:	db d4       	rcall	.+2486   	; 0x3d7a <USB_USBTask>
    33c4:	fa cf       	rjmp	.-12     	; 0x33ba <main+0x58>

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
    33c6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <WaitForExit>
    33ca:	81 11       	cpse	r24, r1

/** Resets all configured hardware required for the bootloader back to their original states. */
static void ResetHardware(void)
{
	/* Shut down the USB and other board hardware drivers */
	USB_Disable();
    33cc:	fa cf       	rjmp	.-12     	; 0x33c2 <main+0x60>
    33ce:	2d d3       	rcall	.+1626   	; 0x3a2a <USB_Disable>
				PORTD |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_Disable(void)
			{
				DDRD  &= ~LEDS_ALL_LEDS;
    33d0:	8a b1       	in	r24, 0x0a	; 10
    33d2:	8f 7c       	andi	r24, 0xCF	; 207
    33d4:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
    33d6:	8b b1       	in	r24, 0x0b	; 11
    33d8:	80 63       	ori	r24, 0x30	; 48
    33da:	8b b9       	out	0x0b, r24	; 11
	LEDs_Disable();

	/* Disable Bootloader active LED toggle timer */
	TIMSK1 = 0;
    33dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = 0;
    33e0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    33e8:	15 be       	out	0x35, r1	; 53

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();

	/* Start the user application */
	AppStartPtr();
    33ea:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <AppStartPtr>
    33ee:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <AppStartPtr+0x1>
    33f2:	09 95       	icall

000033f4 <__vector_18>:
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    33f4:	1f 92       	push	r1
    33f6:	0f 92       	push	r0
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	0f 92       	push	r0
    33fc:	11 24       	eor	r1, r1
    33fe:	8f 93       	push	r24
				PORTD = ((PORTD | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
    3400:	80 e3       	ldi	r24, 0x30	; 48
    3402:	89 b9       	out	0x09, r24	; 9
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
    3404:	8f 91       	pop	r24
    3406:	0f 90       	pop	r0
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	0f 90       	pop	r0
    340c:	1f 90       	pop	r1
    340e:	18 95       	reti

00003410 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    3410:	8f 92       	push	r8
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    3428:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest>
    342c:	8f 77       	andi	r24, 0x7F	; 127
    342e:	81 32       	cpi	r24, 0x21	; 33
    3430:	09 f0       	breq	.+2      	; 0x3434 <EVENT_USB_Device_ControlRequest+0x24>
    3432:	e3 c1       	rjmp	.+966    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
    3434:	80 e3       	ldi	r24, 0x30	; 48
    3436:	89 b9       	out	0x09, r24	; 9

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
    3438:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <USB_ControlRequest+0x6>
    343c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <USB_ControlRequest+0x7>
    3440:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SentCommand+0x7>
    3444:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SentCommand+0x6>

	switch (USB_ControlRequest.bRequest)
    3448:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <USB_ControlRequest+0x1>
    344c:	83 30       	cpi	r24, 0x03	; 3
    344e:	09 f4       	brne	.+2      	; 0x3452 <EVENT_USB_Device_ControlRequest+0x42>
    3450:	91 c1       	rjmp	.+802    	; 0x3774 <EVENT_USB_Device_ControlRequest+0x364>
    3452:	58 f4       	brcc	.+22     	; 0x346a <EVENT_USB_Device_ControlRequest+0x5a>
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	d1 f0       	breq	.+52     	; 0x348c <EVENT_USB_Device_ControlRequest+0x7c>
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	09 f0       	breq	.+2      	; 0x345e <EVENT_USB_Device_ControlRequest+0x4e>
    345c:	ce c1       	rjmp	.+924    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    345e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3462:	87 7f       	andi	r24, 0xF7	; 247
    3464:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3468:	fe c0       	rjmp	.+508    	; 0x3666 <EVENT_USB_Device_ControlRequest+0x256>
    346a:	85 30       	cpi	r24, 0x05	; 5
    346c:	09 f4       	brne	.+2      	; 0x3470 <EVENT_USB_Device_ControlRequest+0x60>
    346e:	a8 c1       	rjmp	.+848    	; 0x37c0 <EVENT_USB_Device_ControlRequest+0x3b0>
    3470:	08 f4       	brcc	.+2      	; 0x3474 <EVENT_USB_Device_ControlRequest+0x64>
    3472:	9e c1       	rjmp	.+828    	; 0x37b0 <EVENT_USB_Device_ControlRequest+0x3a0>
    3474:	86 30       	cpi	r24, 0x06	; 6
    3476:	09 f0       	breq	.+2      	; 0x347a <EVENT_USB_Device_ControlRequest+0x6a>
    3478:	c0 c1       	rjmp	.+896    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
    347a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    347e:	87 7f       	andi	r24, 0xF7	; 247
    3480:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    348a:	aa c1       	rjmp	.+852    	; 0x37e0 <EVENT_USB_Device_ControlRequest+0x3d0>
    348c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3490:	87 7f       	andi	r24, 0xF7	; 247
    3492:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
    3496:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <WaitForExit>
    349a:	88 23       	and	r24, r24
    349c:	19 f0       	breq	.+6      	; 0x34a4 <EVENT_USB_Device_ControlRequest+0x94>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
    349e:	4d de       	rcall	.-870    	; 0x313a <ProcessBootloaderCommand>

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
    34a0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <WaitForExit>
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
    34a4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SentCommand+0x6>
    34a8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SentCommand+0x7>
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	41 f1       	breq	.+80     	; 0x3500 <EVENT_USB_Device_ControlRequest+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    34b0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				while (!(Endpoint_IsOUTReceived()))
    34b4:	22 fd       	sbrc	r18, 2
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <EVENT_USB_Device_ControlRequest+0xb0>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    34b8:	2e b3       	in	r18, 0x1e	; 30
    34ba:	21 11       	cpse	r18, r1
    34bc:	f9 cf       	rjmp	.-14     	; 0x34b0 <EVENT_USB_Device_ControlRequest+0xa0>
    34be:	9d c1       	rjmp	.+826    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    34c0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
    34c4:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <SentCommand>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SentCommand+0x7>
    34ce:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SentCommand+0x6>
    34d2:	e1 e7       	ldi	r30, 0x71	; 113
    34d4:	f1 e0       	ldi	r31, 0x01	; 1
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    34d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    34da:	88 23       	and	r24, r24
    34dc:	81 f0       	breq	.+32     	; 0x34fe <EVENT_USB_Device_ControlRequest+0xee>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    34de:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
    34e2:	81 93       	st	Z+, r24
					SentCommand.DataSize--;
    34e4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SentCommand+0x6>
    34e8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SentCommand+0x7>
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SentCommand+0x7>
    34f2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SentCommand+0x6>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
    34f6:	21 e0       	ldi	r18, 0x01	; 1
    34f8:	e6 37       	cpi	r30, 0x76	; 118
    34fa:	f2 07       	cpc	r31, r18
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
    34fc:	61 f7       	brne	.-40     	; 0x34d6 <EVENT_USB_Device_ControlRequest+0xc6>
    34fe:	1d de       	rcall	.-966    	; 0x313a <ProcessBootloaderCommand>
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
    3500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3504:	85 30       	cpi	r24, 0x05	; 5
    3506:	09 f0       	breq	.+2      	; 0x350a <EVENT_USB_Device_ControlRequest+0xfa>
    3508:	a6 c0       	rjmp	.+332    	; 0x3656 <EVENT_USB_Device_ControlRequest+0x246>
			{
				if (!(SentCommand.DataSize))
    350a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SentCommand+0x6>
    350e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SentCommand+0x7>
    3512:	89 2b       	or	r24, r25
    3514:	21 f4       	brne	.+8      	; 0x351e <EVENT_USB_Device_ControlRequest+0x10e>
				{
					DFU_State = dfuIDLE;
    3516:	82 e0       	ldi	r24, 0x02	; 2
    3518:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
    351c:	9c c0       	rjmp	.+312    	; 0x3656 <EVENT_USB_Device_ControlRequest+0x246>
    351e:	8a e1       	ldi	r24, 0x1A	; 26
    3520:	e4 dd       	rcall	.-1080   	; 0x30ea <DiscardFillerBytes>

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
    3522:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <StartAddr>
    3526:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <StartAddr+0x1>
    352a:	80 2f       	mov	r24, r16
    352c:	8f 71       	andi	r24, 0x1F	; 31
    352e:	dd dd       	rcall	.-1094   	; 0x30ea <DiscardFillerBytes>

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    3530:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
    3534:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__data_end+0x1>
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	ec 01       	movw	r28, r24
    353c:	c0 1b       	sub	r28, r16
    353e:	d1 0b       	sbc	r29, r17

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
    3540:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    3544:	81 11       	cpse	r24, r1
    3546:	75 c0       	rjmp	.+234    	; 0x3632 <EVENT_USB_Device_ControlRequest+0x222>
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
    3548:	ce 01       	movw	r24, r28
    354a:	96 95       	lsr	r25
    354c:	87 95       	ror	r24

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
    354e:	a8 01       	movw	r20, r16
    3550:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <Flash64KBPage>
    3554:	62 2f       	mov	r22, r18
    3556:	70 e0       	ldi	r23, 0x00	; 0

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
    3558:	4a 01       	movw	r8, r20
    355a:	5b 01       	movw	r10, r22
						uint8_t  WordsInFlashPage          = 0;
    355c:	20 e0       	ldi	r18, 0x00	; 0
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    355e:	c1 e0       	ldi	r28, 0x01	; 1

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    3560:	d5 e0       	ldi	r29, 0x05	; 5
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    3562:	13 e0       	ldi	r17, 0x03	; 3
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	09 f4       	brne	.+2      	; 0x356a <EVENT_USB_Device_ControlRequest+0x15a>
    3568:	42 c0       	rjmp	.+132    	; 0x35ee <EVENT_USB_Device_ControlRequest+0x1de>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    356a:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    356e:	33 23       	and	r19, r19
    3570:	d1 f0       	breq	.+52     	; 0x35a6 <EVENT_USB_Device_ControlRequest+0x196>
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
    3572:	01 97       	sbiw	r24, 0x01	; 1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    3574:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				Data.Bytes[1] = UEDATX;
    3578:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

				return Data.Value;
    357c:	ae 2f       	mov	r26, r30
    357e:	b3 2f       	mov	r27, r19
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
    3580:	fa 01       	movw	r30, r20
    3582:	0d 01       	movw	r0, r26
    3584:	c0 93 57 00 	sts	0x0057, r28	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    3588:	e8 95       	spm
    358a:	11 24       	eor	r1, r1

							/* Adjust counters */
							WordsInFlashPage      += 1;
    358c:	2f 5f       	subi	r18, 0xFF	; 255
							CurrFlashAddress.Long += 2;
    358e:	6a 01       	movw	r12, r20
    3590:	7b 01       	movw	r14, r22
    3592:	f2 e0       	ldi	r31, 0x02	; 2
    3594:	cf 0e       	add	r12, r31
    3596:	d1 1c       	adc	r13, r1
    3598:	e1 1c       	adc	r14, r1
    359a:	f1 1c       	adc	r15, r1
    359c:	b7 01       	movw	r22, r14
    359e:	a6 01       	movw	r20, r12

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    35a0:	20 34       	cpi	r18, 0x40	; 64
    35a2:	71 f4       	brne	.+28     	; 0x35c0 <EVENT_USB_Device_ControlRequest+0x1b0>
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <EVENT_USB_Device_ControlRequest+0x1b4>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    35a6:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    35aa:	3b 7f       	andi	r19, 0xFB	; 251
    35ac:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    35b0:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    35b4:	32 fd       	sbrc	r19, 2
    35b6:	dd cf       	rjmp	.-70     	; 0x3572 <EVENT_USB_Device_ControlRequest+0x162>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    35b8:	3e b3       	in	r19, 0x1e	; 30
    35ba:	31 11       	cpse	r19, r1
    35bc:	f9 cf       	rjmp	.-14     	; 0x35b0 <EVENT_USB_Device_ControlRequest+0x1a0>
    35be:	1d c1       	rjmp	.+570    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	81 f6       	brne	.-96     	; 0x3564 <EVENT_USB_Device_ControlRequest+0x154>
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
    35c4:	f4 01       	movw	r30, r8
    35c6:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    35ca:	e8 95       	spm
								boot_spm_busy_wait();
    35cc:	07 b6       	in	r0, 0x37	; 55
    35ce:	00 fc       	sbrc	r0, 0
    35d0:	fd cf       	rjmp	.-6      	; 0x35cc <EVENT_USB_Device_ControlRequest+0x1bc>

								/* Check if programming incomplete */
								if (WordsRemaining)
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <EVENT_USB_Device_ControlRequest+0x1c8>
    35d6:	c6 cf       	rjmp	.-116    	; 0x3564 <EVENT_USB_Device_ControlRequest+0x154>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
    35d8:	f6 01       	movw	r30, r12
    35da:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    35de:	e8 95       	spm
									boot_spm_busy_wait();
    35e0:	07 b6       	in	r0, 0x37	; 55
    35e2:	00 fc       	sbrc	r0, 0
    35e4:	fd cf       	rjmp	.-6      	; 0x35e0 <EVENT_USB_Device_ControlRequest+0x1d0>
								boot_spm_busy_wait();

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
    35e6:	46 01       	movw	r8, r12
    35e8:	57 01       	movw	r10, r14
									WordsInFlashPage          = 0;
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	bb cf       	rjmp	.-138    	; 0x3564 <EVENT_USB_Device_ControlRequest+0x154>
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
    35ee:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
    35f2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__data_end+0x1>
    35f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <StartAddr+0x1>
    35fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <StartAddr>

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
    35fe:	81 e1       	ldi	r24, 0x11	; 17
    3600:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    3604:	e8 95       	spm
    3606:	25 c0       	rjmp	.+74     	; 0x3652 <EVENT_USB_Device_ControlRequest+0x242>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    3608:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
    360c:	88 23       	and	r24, r24
    360e:	a1 f0       	breq	.+40     	; 0x3638 <EVENT_USB_Device_ControlRequest+0x228>
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
    3610:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3612:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
    3616:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <StartAddr>
    361a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <StartAddr+0x1>
    361e:	bd d3       	rcall	.+1914   	; 0x3d9a <eeprom_write_byte>

							/* Adjust counters */
							StartAddr++;
    3620:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <StartAddr>
    3624:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <StartAddr+0x1>
    3628:	01 96       	adiw	r24, 0x01	; 1
    362a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <StartAddr+0x1>
    362e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <StartAddr>
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
    3632:	20 97       	sbiw	r28, 0x00	; 0
    3634:	49 f7       	brne	.-46     	; 0x3608 <EVENT_USB_Device_ControlRequest+0x1f8>
    3636:	0d c0       	rjmp	.+26     	; 0x3652 <EVENT_USB_Device_ControlRequest+0x242>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    3638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    363c:	8b 7f       	andi	r24, 0xFB	; 251
    363e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
    3646:	82 fd       	sbrc	r24, 2
    3648:	e3 cf       	rjmp	.-58     	; 0x3610 <EVENT_USB_Device_ControlRequest+0x200>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
    364a:	8e b3       	in	r24, 0x1e	; 30
    364c:	81 11       	cpse	r24, r1
    364e:	f9 cf       	rjmp	.-14     	; 0x3642 <EVENT_USB_Device_ControlRequest+0x232>
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
    3650:	d4 c0       	rjmp	.+424    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
    3652:	80 e1       	ldi	r24, 0x10	; 16
    3654:	4a dd       	rcall	.-1388   	; 0x30ea <DiscardFillerBytes>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    3656:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    365a:	8b 7f       	andi	r24, 0xFB	; 251
    365c:	88 c0       	rjmp	.+272    	; 0x376e <EVENT_USB_Device_ControlRequest+0x35e>
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    365e:	8e b3       	in	r24, 0x1e	; 30
    3660:	88 23       	and	r24, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <EVENT_USB_Device_ControlRequest+0x256>
    3664:	ca c0       	rjmp	.+404    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3666:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    366a:	80 ff       	sbrs	r24, 0
    366c:	f8 cf       	rjmp	.-16     	; 0x365e <EVENT_USB_Device_ControlRequest+0x24e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
    366e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3672:	89 30       	cpi	r24, 0x09	; 9
    3674:	91 f0       	breq	.+36     	; 0x369a <EVENT_USB_Device_ControlRequest+0x28a>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
    3676:	8a 30       	cpi	r24, 0x0A	; 10
    3678:	59 f4       	brne	.+22     	; 0x3690 <EVENT_USB_Device_ControlRequest+0x280>
    367a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	39 f4       	brne	.+14     	; 0x3690 <EVENT_USB_Device_ControlRequest+0x280>
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
    3682:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <StartAddr>
    3686:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <StartAddr+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    368a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <EVENT_USB_Device_ControlRequest+0x284>
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
    3690:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <ResponseByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3694:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    3698:	67 c0       	rjmp	.+206    	; 0x3768 <EVENT_USB_Device_ControlRequest+0x358>
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
    369a:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <StartAddr>
    369e:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <StartAddr+0x1>
    36a2:	c0 91 68 01 	lds	r28, 0x0168	; 0x800168 <__data_end>
    36a6:	d0 91 69 01 	lds	r29, 0x0169	; 0x800169 <__data_end+0x1>
    36aa:	21 96       	adiw	r28, 0x01	; 1
    36ac:	c2 1b       	sub	r28, r18
    36ae:	d3 0b       	sbc	r29, r19

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
    36b0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x1>
    36b4:	81 11       	cpse	r24, r1
    36b6:	2e c0       	rjmp	.+92     	; 0x3714 <EVENT_USB_Device_ControlRequest+0x304>
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
    36b8:	d6 95       	lsr	r29
    36ba:	c7 95       	ror	r28

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
    36bc:	c9 01       	movw	r24, r18
    36be:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <Flash64KBPage>
    36c2:	a2 2f       	mov	r26, r18
    36c4:	b0 e0       	ldi	r27, 0x00	; 0

					while (WordsRemaining--)
    36c6:	21 97       	sbiw	r28, 0x01	; 1
    36c8:	e0 f0       	brcs	.+56     	; 0x3702 <EVENT_USB_Device_ControlRequest+0x2f2>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    36ca:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    36ce:	20 32       	cpi	r18, 0x20	; 32
    36d0:	59 f0       	breq	.+22     	; 0x36e8 <EVENT_USB_Device_ControlRequest+0x2d8>

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
    36d2:	fc 01       	movw	r30, r24
    36d4:	25 91       	lpm	r18, Z+
    36d6:	34 91       	lpm	r19, Z
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    36d8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
    36dc:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
    36e0:	02 96       	adiw	r24, 0x02	; 2
    36e2:	a1 1d       	adc	r26, r1
    36e4:	b1 1d       	adc	r27, r1
    36e6:	ef cf       	rjmp	.-34     	; 0x36c6 <EVENT_USB_Device_ControlRequest+0x2b6>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    36e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    36ec:	2e 7f       	andi	r18, 0xFE	; 254
    36ee:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36f2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    36f6:	20 fd       	sbrc	r18, 0
    36f8:	ec cf       	rjmp	.-40     	; 0x36d2 <EVENT_USB_Device_ControlRequest+0x2c2>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    36fa:	2e b3       	in	r18, 0x1e	; 30
    36fc:	21 11       	cpse	r18, r1
    36fe:	f9 cf       	rjmp	.-14     	; 0x36f2 <EVENT_USB_Device_ControlRequest+0x2e2>
    3700:	7c c0       	rjmp	.+248    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
    3702:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
    3706:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__data_end+0x1>
    370a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <StartAddr+0x1>
    370e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <StartAddr>
    3712:	27 c0       	rjmp	.+78     	; 0x3762 <EVENT_USB_Device_ControlRequest+0x352>
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	29 f5       	brne	.+74     	; 0x3762 <EVENT_USB_Device_ControlRequest+0x352>
				{
					while (BytesRemaining--)
    3718:	20 97       	sbiw	r28, 0x00	; 0
    371a:	19 f1       	breq	.+70     	; 0x3762 <EVENT_USB_Device_ControlRequest+0x352>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    371c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
    3720:	80 32       	cpi	r24, 0x20	; 32
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
    3722:	91 f0       	breq	.+36     	; 0x3748 <EVENT_USB_Device_ControlRequest+0x338>
    3724:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <StartAddr>
    3728:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <StartAddr+0x1>
    372c:	2e d3       	rcall	.+1628   	; 0x3d8a <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    372e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

						/* Adjust counters */
						StartAddr++;
    3732:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <StartAddr>
    3736:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <StartAddr+0x1>
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <StartAddr+0x1>
    3740:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <StartAddr>
    3744:	21 97       	sbiw	r28, 0x01	; 1
    3746:	e8 cf       	rjmp	.-48     	; 0x3718 <EVENT_USB_Device_ControlRequest+0x308>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3748:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    374c:	8e 7f       	andi	r24, 0xFE	; 254
    374e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3752:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
    3756:	80 fd       	sbrc	r24, 0
    3758:	e5 cf       	rjmp	.-54     	; 0x3724 <EVENT_USB_Device_ControlRequest+0x314>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
    375a:	8e b3       	in	r24, 0x1e	; 30
    375c:	81 11       	cpse	r24, r1
    375e:	f9 cf       	rjmp	.-14     	; 0x3752 <EVENT_USB_Device_ControlRequest+0x342>
    3760:	4c c0       	rjmp	.+152    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
    3762:	82 e0       	ldi	r24, 0x02	; 2
    3764:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3768:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    376c:	8e 7f       	andi	r24, 0xFE	; 254
    376e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3772:	36 c0       	rjmp	.+108    	; 0x37e0 <EVENT_USB_Device_ControlRequest+0x3d0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3778:	87 7f       	andi	r24, 0xF7	; 247
    377a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    377e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    3782:	80 fd       	sbrc	r24, 0
    3784:	04 c0       	rjmp	.+8      	; 0x378e <EVENT_USB_Device_ControlRequest+0x37e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    3786:	8e b3       	in	r24, 0x1e	; 30
    3788:	81 11       	cpse	r24, r1
    378a:	f9 cf       	rjmp	.-14     	; 0x377e <EVENT_USB_Device_ControlRequest+0x36e>
    378c:	36 c0       	rjmp	.+108    	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
				  return;
			}

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
    378e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <DFU_Status>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3792:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    3796:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    379a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
    379e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
    37a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    37a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    37aa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    37ae:	dc cf       	rjmp	.-72     	; 0x3768 <EVENT_USB_Device_ControlRequest+0x358>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    37b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    37b4:	87 7f       	andi	r24, 0xF7	; 247
    37b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
    37ba:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <DFU_Status>
    37be:	10 c0       	rjmp	.+32     	; 0x37e0 <EVENT_USB_Device_ControlRequest+0x3d0>
    37c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    37c4:	87 7f       	andi	r24, 0xF7	; 247
    37c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    37ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
    37ce:	80 fd       	sbrc	r24, 0
    37d0:	04 c0       	rjmp	.+8      	; 0x37da <EVENT_USB_Device_ControlRequest+0x3ca>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    37d2:	8e b3       	in	r24, 0x1e	; 30
    37d4:	81 11       	cpse	r24, r1
    37d6:	f9 cf       	rjmp	.-14     	; 0x37ca <EVENT_USB_Device_ControlRequest+0x3ba>
    37d8:	10 c0       	rjmp	.+32     	; 0x37fa <EVENT_USB_Device_ControlRequest+0x3ea>
				  return;
			}

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
    37da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    37de:	5a cf       	rjmp	.-332    	; 0x3694 <EVENT_USB_Device_ControlRequest+0x284>
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
    37f6:	8f 90       	pop	r8
    37f8:	fb c0       	rjmp	.+502    	; 0x39f0 <Endpoint_ClearStatusStage>
			break;
	}
}
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	df 90       	pop	r13
    3808:	cf 90       	pop	r12
    380a:	bf 90       	pop	r11
    380c:	af 90       	pop	r10
    380e:	9f 90       	pop	r9
    3810:	8f 90       	pop	r8
    3812:	08 95       	ret

00003814 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    3814:	29 2f       	mov	r18, r25
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	22 30       	cpi	r18, 0x02	; 2
    381a:	31 05       	cpc	r19, r1
    381c:	59 f0       	breq	.+22     	; 0x3834 <CALLBACK_USB_GetDescriptor+0x20>
    381e:	23 30       	cpi	r18, 0x03	; 3
    3820:	31 05       	cpc	r19, r1
    3822:	69 f0       	breq	.+26     	; 0x383e <CALLBACK_USB_GetDescriptor+0x2a>
    3824:	21 30       	cpi	r18, 0x01	; 1
    3826:	31 05       	cpc	r19, r1
    3828:	f9 f4       	brne	.+62     	; 0x3868 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    382a:	82 e1       	ldi	r24, 0x12	; 18
    382c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    382e:	26 e5       	ldi	r18, 0x56	; 86
    3830:	31 e0       	ldi	r19, 0x01	; 1
    3832:	1e c0       	rjmp	.+60     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    3834:	8b e1       	ldi	r24, 0x1B	; 27
    3836:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    3838:	2b e3       	ldi	r18, 0x3B	; 59
    383a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    383c:	19 c0       	rjmp	.+50     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    383e:	88 23       	and	r24, r24
    3840:	49 f0       	breq	.+18     	; 0x3854 <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    3842:	81 30       	cpi	r24, 0x01	; 1
    3844:	61 f0       	breq	.+24     	; 0x385e <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    3846:	82 30       	cpi	r24, 0x02	; 2
    3848:	79 f4       	brne	.+30     	; 0x3868 <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    384a:	82 e1       	ldi	r24, 0x12	; 18
    384c:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    384e:	29 e0       	ldi	r18, 0x09	; 9
    3850:	31 e0       	ldi	r19, 0x01	; 1
    3852:	0e c0       	rjmp	.+28     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    3854:	84 e0       	ldi	r24, 0x04	; 4
    3856:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    3858:	27 e3       	ldi	r18, 0x37	; 55
    385a:	31 e0       	ldi	r19, 0x01	; 1
    385c:	09 c0       	rjmp	.+18     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    385e:	88 e1       	ldi	r24, 0x18	; 24
    3860:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    3862:	2d e1       	ldi	r18, 0x1D	; 29
    3864:	31 e0       	ldi	r19, 0x01	; 1
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    3870:	fa 01       	movw	r30, r20
    3872:	31 83       	std	Z+1, r19	; 0x01
    3874:	20 83       	st	Z, r18
	return Size;
}
    3876:	08 95       	ret

00003878 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    3878:	07 b6       	in	r0, 0x37	; 55
    387a:	00 fc       	sbrc	r0, 0
    387c:	fd cf       	rjmp	.-6      	; 0x3878 <BootloaderAPI_ErasePage>
    387e:	f9 99       	sbic	0x1f, 1	; 31
    3880:	fe cf       	rjmp	.-4      	; 0x387e <BootloaderAPI_ErasePage+0x6>
    3882:	23 e0       	ldi	r18, 0x03	; 3
    3884:	fb 01       	movw	r30, r22
    3886:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    388a:	e8 95       	spm
	boot_spm_busy_wait();
    388c:	07 b6       	in	r0, 0x37	; 55
    388e:	00 fc       	sbrc	r0, 0
    3890:	fd cf       	rjmp	.-6      	; 0x388c <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    3892:	81 e1       	ldi	r24, 0x11	; 17
    3894:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    3898:	e8 95       	spm
    389a:	08 95       	ret

0000389c <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    389c:	07 b6       	in	r0, 0x37	; 55
    389e:	00 fc       	sbrc	r0, 0
    38a0:	fd cf       	rjmp	.-6      	; 0x389c <BootloaderAPI_WritePage>
    38a2:	f9 99       	sbic	0x1f, 1	; 31
    38a4:	fe cf       	rjmp	.-4      	; 0x38a2 <BootloaderAPI_WritePage+0x6>
    38a6:	25 e0       	ldi	r18, 0x05	; 5
    38a8:	fb 01       	movw	r30, r22
    38aa:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38ae:	e8 95       	spm
	boot_spm_busy_wait();
    38b0:	07 b6       	in	r0, 0x37	; 55
    38b2:	00 fc       	sbrc	r0, 0
    38b4:	fd cf       	rjmp	.-6      	; 0x38b0 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    38b6:	81 e1       	ldi	r24, 0x11	; 17
    38b8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38bc:	e8 95       	spm
    38be:	08 95       	ret

000038c0 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    38c0:	07 b6       	in	r0, 0x37	; 55
    38c2:	00 fc       	sbrc	r0, 0
    38c4:	fd cf       	rjmp	.-6      	; 0x38c0 <BootloaderAPI_FillWord>
    38c6:	f9 99       	sbic	0x1f, 1	; 31
    38c8:	fe cf       	rjmp	.-4      	; 0x38c6 <BootloaderAPI_FillWord+0x6>
    38ca:	21 e0       	ldi	r18, 0x01	; 1
    38cc:	fb 01       	movw	r30, r22
    38ce:	0a 01       	movw	r0, r20
    38d0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38d4:	e8 95       	spm
    38d6:	11 24       	eor	r1, r1
    38d8:	08 95       	ret

000038da <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    38da:	21 e2       	ldi	r18, 0x21	; 33
    38dc:	fc 01       	movw	r30, r24
    38de:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38e2:	84 91       	lpm	r24, Z
}
    38e4:	08 95       	ret

000038e6 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    38e6:	29 e0       	ldi	r18, 0x09	; 9
    38e8:	fc 01       	movw	r30, r24
    38ea:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38ee:	84 91       	lpm	r24, Z
}
    38f0:	08 95       	ret

000038f2 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    38f2:	e1 e0       	ldi	r30, 0x01	; 1
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	89 e0       	ldi	r24, 0x09	; 9
    38f8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    38fc:	84 91       	lpm	r24, Z
}
    38fe:	08 95       	ret

00003900 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    3900:	07 b6       	in	r0, 0x37	; 55
    3902:	00 fc       	sbrc	r0, 0
    3904:	fd cf       	rjmp	.-6      	; 0x3900 <BootloaderAPI_WriteLock>
    3906:	f9 99       	sbic	0x1f, 1	; 31
    3908:	fe cf       	rjmp	.-4      	; 0x3906 <BootloaderAPI_WriteLock+0x6>
    390a:	80 95       	com	r24
    390c:	99 e0       	ldi	r25, 0x09	; 9
    390e:	e1 e0       	ldi	r30, 0x01	; 1
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	08 2e       	mov	r0, r24
    3914:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    3918:	e8 95       	spm
    391a:	08 95       	ret

0000391c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    391c:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <USB_ControlRequest+0x6>
    3920:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <USB_ControlRequest+0x7>
    3924:	26 17       	cp	r18, r22
    3926:	37 07       	cpc	r19, r23
    3928:	48 f0       	brcs	.+18     	; 0x393c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    392a:	61 15       	cp	r22, r1
    392c:	71 05       	cpc	r23, r1
    392e:	39 f4       	brne	.+14     	; 0x393e <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3930:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3934:	2e 7f       	andi	r18, 0xFE	; 254
    3936:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    393a:	01 c0       	rjmp	.+2      	; 0x393e <Endpoint_Write_Control_Stream_LE+0x22>
    393c:	b9 01       	movw	r22, r18
    393e:	fc 01       	movw	r30, r24
    3940:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3942:	61 15       	cp	r22, r1
    3944:	71 05       	cpc	r23, r1
    3946:	59 f1       	breq	.+86     	; 0x399e <Endpoint_Write_Control_Stream_LE+0x82>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3948:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    394a:	88 23       	and	r24, r24
    394c:	d1 f1       	breq	.+116    	; 0x39c2 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    394e:	85 30       	cpi	r24, 0x05	; 5
    3950:	d1 f1       	breq	.+116    	; 0x39c6 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3952:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3956:	83 fd       	sbrc	r24, 3
    3958:	38 c0       	rjmp	.+112    	; 0x39ca <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    395a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    395e:	82 fd       	sbrc	r24, 2
    3960:	2a c0       	rjmp	.+84     	; 0x39b6 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3962:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  break;

		if (Endpoint_IsINReady())
    3966:	80 ff       	sbrs	r24, 0
    3968:	ec cf       	rjmp	.-40     	; 0x3942 <Endpoint_Write_Control_Stream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    396a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    396e:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3970:	61 15       	cp	r22, r1
    3972:	71 05       	cpc	r23, r1
    3974:	51 f0       	breq	.+20     	; 0x398a <Endpoint_Write_Control_Stream_LE+0x6e>
    3976:	80 32       	cpi	r24, 0x20	; 32
    3978:	91 05       	cpc	r25, r1
    397a:	38 f4       	brcc	.+14     	; 0x398a <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    397c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    397e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3982:	61 50       	subi	r22, 0x01	; 1
    3984:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    3986:	01 96       	adiw	r24, 0x01	; 1
    3988:	f3 cf       	rjmp	.-26     	; 0x3970 <Endpoint_Write_Control_Stream_LE+0x54>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    398a:	21 e0       	ldi	r18, 0x01	; 1
    398c:	80 97       	sbiw	r24, 0x20	; 32
    398e:	09 f0       	breq	.+2      	; 0x3992 <Endpoint_Write_Control_Stream_LE+0x76>
    3990:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3992:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3996:	8e 7f       	andi	r24, 0xFE	; 254
    3998:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    399c:	d2 cf       	rjmp	.-92     	; 0x3942 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    399e:	21 11       	cpse	r18, r1
    39a0:	d3 cf       	rjmp	.-90     	; 0x3948 <Endpoint_Write_Control_Stream_LE+0x2c>
    39a2:	09 c0       	rjmp	.+18     	; 0x39b6 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39a4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39a6:	88 23       	and	r24, r24
    39a8:	61 f0       	breq	.+24     	; 0x39c2 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39aa:	85 30       	cpi	r24, 0x05	; 5
    39ac:	61 f0       	breq	.+24     	; 0x39c6 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39b2:	83 fd       	sbrc	r24, 3
    39b4:	0a c0       	rjmp	.+20     	; 0x39ca <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    39ba:	82 ff       	sbrs	r24, 2
    39bc:	f3 cf       	rjmp	.-26     	; 0x39a4 <Endpoint_Write_Control_Stream_LE+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    39c6:	83 e0       	ldi	r24, 0x03	; 3
    39c8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    39ca:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    39cc:	08 95       	ret

000039ce <Endpoint_ConfigureEndpoint_Prv>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    39ce:	eb ee       	ldi	r30, 0xEB	; 235
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	81 60       	ori	r24, 0x01	; 1
    39d6:	80 83       	st	Z, r24
    39d8:	ed ee       	ldi	r30, 0xED	; 237
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	10 82       	st	Z, r1
    39de:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    39e2:	40 83       	st	Z, r20
    39e4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    39e8:	88 1f       	adc	r24, r24
    39ea:	88 27       	eor	r24, r24
    39ec:	88 1f       	adc	r24, r24
    39ee:	08 95       	ret

000039f0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    39f0:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest>
    39f4:	87 ff       	sbrs	r24, 7
    39f6:	0f c0       	rjmp	.+30     	; 0x3a16 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		while (!(Endpoint_IsOUTReceived()))
    39fc:	82 fd       	sbrc	r24, 2
    39fe:	04 c0       	rjmp	.+8      	; 0x3a08 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a00:	8e b3       	in	r24, 0x1e	; 30
    3a02:	81 11       	cpse	r24, r1
    3a04:	f9 cf       	rjmp	.-14     	; 0x39f8 <Endpoint_ClearStatusStage+0x8>
    3a06:	10 c0       	rjmp	.+32     	; 0x3a28 <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    3a08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3a0c:	8b 7f       	andi	r24, 0xFB	; 251
    3a0e:	0a c0       	rjmp	.+20     	; 0x3a24 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a10:	8e b3       	in	r24, 0x1e	; 30
    3a12:	88 23       	and	r24, r24
    3a14:	49 f0       	breq	.+18     	; 0x3a28 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3a1a:	80 ff       	sbrs	r24, 0
    3a1c:	f9 cf       	rjmp	.-14     	; 0x3a10 <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3a22:	8e 7f       	andi	r24, 0xFE	; 254
    3a24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3a28:	08 95       	ret

00003a2a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    3a2a:	51 d0       	rcall	.+162    	; 0x3ace <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a2c:	53 d0       	rcall	.+166    	; 0x3ad4 <USB_INT_ClearAllInterrupts>
    3a2e:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	81 60       	ori	r24, 0x01	; 1
    3a36:	80 83       	st	Z, r24
    3a38:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 81       	ld	r24, Z
    3a3e:	8f 77       	andi	r24, 0x7F	; 127
    3a40:	80 83       	st	Z, r24
    3a42:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3a44:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	81 60       	ori	r24, 0x01	; 1
    3a4c:	80 83       	st	Z, r24
    3a4e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    3a52:	08 95       	ret

00003a54 <USB_ResetInterface>:
    3a54:	3c d0       	rcall	.+120    	; 0x3ace <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    3a56:	3e d0       	rcall	.+124    	; 0x3ad4 <USB_INT_ClearAllInterrupts>
    3a58:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a5c:	8f 77       	andi	r24, 0x7F	; 127
    3a5e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    3a62:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
				USBCON |=  (1 << USBE);
    3a66:	80 68       	ori	r24, 0x80	; 128
    3a68:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    3a6c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a70:	8f 7d       	andi	r24, 0xDF	; 223
    3a72:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    3a76:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3a78:	89 bd       	out	0x29, r24	; 41
    3a7a:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3a7c:	89 bd       	out	0x29, r24	; 41
    3a7e:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3a80:	00 fe       	sbrs	r0, 0
    3a82:	fd cf       	rjmp	.-6      	; 0x3a7e <USB_ResetInterface+0x2a>
    3a84:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3a86:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    3a8a:	42 e2       	ldi	r20, 0x22	; 34
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	9e df       	rcall	.-196    	; 0x39ce <Endpoint_ConfigureEndpoint_Prv>
    3a92:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a96:	8e 7f       	andi	r24, 0xFE	; 254
    3a98:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    3a9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3aa0:	81 60       	ori	r24, 0x01	; 1
    3aa2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3aa6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3aaa:	88 60       	ori	r24, 0x08	; 8
    3aac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3ab0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3ab4:	8e 7f       	andi	r24, 0xFE	; 254
    3ab6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    3aba:	08 95       	ret

00003abc <USB_Init>:
    3abc:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	80 81       	ld	r24, Z
    3ac2:	8e 7f       	andi	r24, 0xFE	; 254
    3ac4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <USB_IsInitialized>

	USB_ResetInterface();
    3acc:	c3 cf       	rjmp	.-122    	; 0x3a54 <USB_ResetInterface>

00003ace <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3ace:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3ad2:	08 95       	ret

00003ad4 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3ad4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    3ad8:	08 95       	ret

00003ada <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3ada:	1f 92       	push	r1
    3adc:	0f 92       	push	r0
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	0f 92       	push	r0
    3ae2:	11 24       	eor	r1, r1
    3ae4:	2f 93       	push	r18
    3ae6:	3f 93       	push	r19
    3ae8:	4f 93       	push	r20
    3aea:	5f 93       	push	r21
    3aec:	6f 93       	push	r22
    3aee:	7f 93       	push	r23
    3af0:	8f 93       	push	r24
    3af2:	9f 93       	push	r25
    3af4:	af 93       	push	r26
    3af6:	bf 93       	push	r27
    3af8:	ef 93       	push	r30
    3afa:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3afc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3b00:	80 ff       	sbrs	r24, 0
    3b02:	16 c0       	rjmp	.+44     	; 0x3b30 <__vector_11+0x56>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3b04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b08:	80 ff       	sbrs	r24, 0
    3b0a:	12 c0       	rjmp	.+36     	; 0x3b30 <__vector_11+0x56>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b10:	8e 7f       	andi	r24, 0xFE	; 254
    3b12:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3b16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b1a:	80 61       	ori	r24, 0x10	; 16
    3b1c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3b20:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    3b24:	80 62       	ori	r24, 0x20	; 32
    3b26:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b2a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3b2c:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    3b2e:	24 d1       	rcall	.+584    	; 0x3d78 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b30:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3b34:	84 ff       	sbrs	r24, 4
    3b36:	2e c0       	rjmp	.+92     	; 0x3b94 <__vector_11+0xba>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3b38:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b3c:	84 ff       	sbrs	r24, 4
    3b3e:	2a c0       	rjmp	.+84     	; 0x3b94 <__vector_11+0xba>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b40:	84 e0       	ldi	r24, 0x04	; 4
    3b42:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b44:	86 e0       	ldi	r24, 0x06	; 6
    3b46:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3b48:	09 b4       	in	r0, 0x29	; 41
    3b4a:	00 fe       	sbrs	r0, 0
    3b4c:	fd cf       	rjmp	.-6      	; 0x3b48 <__vector_11+0x6e>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3b4e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    3b52:	8f 7d       	andi	r24, 0xDF	; 223
    3b54:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3b58:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    3b5c:	8f 7e       	andi	r24, 0xEF	; 239
    3b5e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3b62:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b66:	8f 7e       	andi	r24, 0xEF	; 239
    3b68:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3b6c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3b70:	81 60       	ori	r24, 0x01	; 1
    3b72:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3b76:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_Device_ConfigurationNumber>
    3b7a:	88 23       	and	r24, r24
    3b7c:	11 f0       	breq	.+4      	; 0x3b82 <__vector_11+0xa8>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3b7e:	84 e0       	ldi	r24, 0x04	; 4
    3b80:	07 c0       	rjmp	.+14     	; 0x3b90 <__vector_11+0xb6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3b82:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3b86:	87 fd       	sbrc	r24, 7
    3b88:	02 c0       	rjmp	.+4      	; 0x3b8e <__vector_11+0xb4>
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	01 c0       	rjmp	.+2      	; 0x3b90 <__vector_11+0xb6>
    3b8e:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    3b90:	8e bb       	out	0x1e, r24	; 30
    3b92:	f2 d0       	rcall	.+484    	; 0x3d78 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3b94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3b98:	83 ff       	sbrs	r24, 3
    3b9a:	21 c0       	rjmp	.+66     	; 0x3bde <__vector_11+0x104>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3b9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3ba0:	83 ff       	sbrs	r24, 3
    3ba2:	1d c0       	rjmp	.+58     	; 0x3bde <__vector_11+0x104>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3ba4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    3ba8:	87 7f       	andi	r24, 0xF7	; 247
    3baa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    3bb2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3bb6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    3bba:	8e 7f       	andi	r24, 0xFE	; 254
    3bbc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3bc0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3bc4:	8e 7f       	andi	r24, 0xFE	; 254
    3bc6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3bca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    3bce:	80 61       	ori	r24, 0x10	; 16
    3bd0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3bd4:	42 e2       	ldi	r20, 0x22	; 34
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3bda:	f9 de       	rcall	.-526    	; 0x39ce <Endpoint_ConfigureEndpoint_Prv>
    3bdc:	cd d0       	rcall	.+410    	; 0x3d78 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3bde:	ff 91       	pop	r31
    3be0:	ef 91       	pop	r30
    3be2:	bf 91       	pop	r27
    3be4:	af 91       	pop	r26
    3be6:	9f 91       	pop	r25
    3be8:	8f 91       	pop	r24
    3bea:	7f 91       	pop	r23
    3bec:	6f 91       	pop	r22
    3bee:	5f 91       	pop	r21
    3bf0:	4f 91       	pop	r20
    3bf2:	3f 91       	pop	r19
    3bf4:	2f 91       	pop	r18
    3bf6:	0f 90       	pop	r0
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	0f 90       	pop	r0
    3bfc:	1f 90       	pop	r1
    3bfe:	18 95       	reti

00003c00 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3c00:	1f 93       	push	r17
    3c02:	cf 93       	push	r28
    3c04:	df 93       	push	r29
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <USB_Device_ProcessControlRequest+0x8>
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	ed e7       	ldi	r30, 0x7D	; 125
    3c0e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3c10:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3c14:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	e5 38       	cpi	r30, 0x85	; 133
    3c1a:	f8 07       	cpc	r31, r24
    3c1c:	c9 f7       	brne	.-14     	; 0x3c10 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3c1e:	f8 db       	rcall	.-2064   	; 0x3410 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    3c24:	83 ff       	sbrs	r24, 3
    3c26:	94 c0       	rjmp	.+296    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3c28:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3c2c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <USB_ControlRequest+0x1>
    3c30:	96 30       	cpi	r25, 0x06	; 6
    3c32:	e1 f1       	breq	.+120    	; 0x3cac <USB_Device_ProcessControlRequest+0xac>
    3c34:	28 f4       	brcc	.+10     	; 0x3c40 <USB_Device_ProcessControlRequest+0x40>
    3c36:	99 23       	and	r25, r25
    3c38:	51 f0       	breq	.+20     	; 0x3c4e <USB_Device_ProcessControlRequest+0x4e>
    3c3a:	95 30       	cpi	r25, 0x05	; 5
    3c3c:	b1 f0       	breq	.+44     	; 0x3c6a <USB_Device_ProcessControlRequest+0x6a>
    3c3e:	88 c0       	rjmp	.+272    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
    3c40:	98 30       	cpi	r25, 0x08	; 8
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <USB_Device_ProcessControlRequest+0x46>
    3c44:	53 c0       	rjmp	.+166    	; 0x3cec <USB_Device_ProcessControlRequest+0xec>
    3c46:	99 30       	cpi	r25, 0x09	; 9
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <USB_Device_ProcessControlRequest+0x4c>
    3c4a:	62 c0       	rjmp	.+196    	; 0x3d10 <USB_Device_ProcessControlRequest+0x110>
    3c4c:	81 c0       	rjmp	.+258    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c4e:	8d 7f       	andi	r24, 0xFD	; 253
    3c50:	80 38       	cpi	r24, 0x80	; 128
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <USB_Device_ProcessControlRequest+0x56>
    3c54:	7d c0       	rjmp	.+250    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3c5a:	87 7f       	andi	r24, 0xF7	; 247
    3c5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3c60:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
    3c64:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    3c68:	4c c0       	rjmp	.+152    	; 0x3d02 <USB_Device_ProcessControlRequest+0x102>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3c6a:	81 11       	cpse	r24, r1
    3c6c:	71 c0       	rjmp	.+226    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3c6e:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <USB_ControlRequest+0x2>
    3c72:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3c74:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    3c78:	80 78       	andi	r24, 0x80	; 128
    3c7a:	81 2b       	or	r24, r17
    3c7c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3c84:	87 7f       	andi	r24, 0xF7	; 247
    3c86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3c8a:	b2 de       	rcall	.-668    	; 0x39f0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3c8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	while (!(Endpoint_IsINReady()));
    3c90:	80 ff       	sbrs	r24, 0
    3c92:	fc cf       	rjmp	.-8      	; 0x3c8c <USB_Device_ProcessControlRequest+0x8c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3c94:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    3c98:	80 68       	ori	r24, 0x80	; 128
    3c9a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3c9e:	11 11       	cpse	r17, r1
    3ca0:	02 c0       	rjmp	.+4      	; 0x3ca6 <USB_Device_ProcessControlRequest+0xa6>
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
    3ca4:	01 c0       	rjmp	.+2      	; 0x3ca8 <USB_Device_ProcessControlRequest+0xa8>
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	8e bb       	out	0x1e, r24	; 30
    3caa:	52 c0       	rjmp	.+164    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3cac:	80 58       	subi	r24, 0x80	; 128
    3cae:	82 30       	cpi	r24, 0x02	; 2
    3cb0:	08 f0       	brcs	.+2      	; 0x3cb4 <USB_Device_ProcessControlRequest+0xb4>
    3cb2:	4e c0       	rjmp	.+156    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3cb4:	ae 01       	movw	r20, r28
    3cb6:	4f 5f       	subi	r20, 0xFF	; 255
    3cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cba:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <USB_ControlRequest+0x4>
    3cbe:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest+0x2>
    3cc2:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <USB_ControlRequest+0x3>
    3cc6:	a6 dd       	rcall	.-1204   	; 0x3814 <CALLBACK_USB_GetDescriptor>
    3cc8:	bc 01       	movw	r22, r24
    3cca:	89 2b       	or	r24, r25
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <USB_Device_ProcessControlRequest+0xd0>
    3cce:	40 c0       	rjmp	.+128    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3cd0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3cd4:	97 7f       	andi	r25, 0xF7	; 247
    3cd6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cde:	1e de       	rcall	.-964    	; 0x391c <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
    3ce0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3ce4:	8b 7f       	andi	r24, 0xFB	; 251
    3ce6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3cea:	32 c0       	rjmp	.+100    	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3cec:	80 38       	cpi	r24, 0x80	; 128
    3cee:	81 f5       	brne	.+96     	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3cf4:	87 7f       	andi	r24, 0xF7	; 247
    3cf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3cfa:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3cfe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
    3d02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3d06:	8e 7f       	andi	r24, 0xFE	; 254
    3d08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3d0c:	71 de       	rcall	.-798    	; 0x39f0 <Endpoint_ClearStatusStage>
    3d0e:	20 c0       	rjmp	.+64     	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3d10:	81 11       	cpse	r24, r1
    3d12:	1e c0       	rjmp	.+60     	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3d14:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest+0x2>
    3d18:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <USB_ControlRequest+0x3>
    3d1c:	99 27       	eor	r25, r25
    3d1e:	02 97       	sbiw	r24, 0x02	; 2
    3d20:	bc f4       	brge	.+46     	; 0x3d50 <USB_Device_ProcessControlRequest+0x150>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3d26:	87 7f       	andi	r24, 0xF7	; 247
    3d28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3d2c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USB_ControlRequest+0x2>
    3d30:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    3d34:	5d de       	rcall	.-838    	; 0x39f0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3d36:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_Device_ConfigurationNumber>
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	06 c0       	rjmp	.+12     	; 0x3d4a <USB_Device_ProcessControlRequest+0x14a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3d3e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3d42:	87 fd       	sbrc	r24, 7
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <USB_Device_ProcessControlRequest+0x14a>
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	01 c0       	rjmp	.+2      	; 0x3d4c <USB_Device_ProcessControlRequest+0x14c>
    3d4a:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
    3d4c:	8e bb       	out	0x1e, r24	; 30
    3d4e:	14 d0       	rcall	.+40     	; 0x3d78 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3d54:	83 ff       	sbrs	r24, 3
    3d56:	0a c0       	rjmp	.+20     	; 0x3d6c <USB_Device_ProcessControlRequest+0x16c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    3d5c:	87 7f       	andi	r24, 0xF7	; 247
    3d5e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3d62:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    3d66:	80 62       	ori	r24, 0x20	; 32
    3d68:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	08 95       	ret

00003d78 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3d78:	08 95       	ret

00003d7a <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3d7a:	8e b3       	in	r24, 0x1e	; 30
    3d7c:	88 23       	and	r24, r24
    3d7e:	21 f0       	breq	.+8      	; 0x3d88 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3d80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3d84:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3d86:	3c cf       	rjmp	.-392    	; 0x3c00 <USB_Device_ProcessControlRequest>
    3d88:	08 95       	ret

00003d8a <eeprom_read_byte>:
    3d8a:	f9 99       	sbic	0x1f, 1	; 31
    3d8c:	fe cf       	rjmp	.-4      	; 0x3d8a <eeprom_read_byte>
    3d8e:	92 bd       	out	0x22, r25	; 34
    3d90:	81 bd       	out	0x21, r24	; 33
    3d92:	f8 9a       	sbi	0x1f, 0	; 31
    3d94:	99 27       	eor	r25, r25
    3d96:	80 b5       	in	r24, 0x20	; 32
    3d98:	08 95       	ret

00003d9a <eeprom_write_byte>:
    3d9a:	26 2f       	mov	r18, r22

00003d9c <eeprom_write_r18>:
    3d9c:	f9 99       	sbic	0x1f, 1	; 31
    3d9e:	fe cf       	rjmp	.-4      	; 0x3d9c <eeprom_write_r18>
    3da0:	1f ba       	out	0x1f, r1	; 31
    3da2:	92 bd       	out	0x22, r25	; 34
    3da4:	81 bd       	out	0x21, r24	; 33
    3da6:	20 bd       	out	0x20, r18	; 32
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	f8 94       	cli
    3dac:	fa 9a       	sbi	0x1f, 2	; 31
    3dae:	f9 9a       	sbi	0x1f, 1	; 31
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	01 96       	adiw	r24, 0x01	; 1
    3db4:	08 95       	ret

00003db6 <_exit>:
    3db6:	f8 94       	cli

00003db8 <__stop_program>:
    3db8:	ff cf       	rjmp	.-2      	; 0x3db8 <__stop_program>

Disassembly of section .apitable_trampolines:

00003fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    3fa0:	6b cc       	rjmp	.-1834   	; 0x3878 <BootloaderAPI_ErasePage>

00003fa2 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    3fa2:	7c cc       	rjmp	.-1800   	; 0x389c <BootloaderAPI_WritePage>

00003fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    3fa4:	8d cc       	rjmp	.-1766   	; 0x38c0 <BootloaderAPI_FillWord>

00003fa6 <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    3fa6:	99 cc       	rjmp	.-1742   	; 0x38da <BootloaderAPI_ReadSignature>

00003fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    3fa8:	9e cc       	rjmp	.-1732   	; 0x38e6 <BootloaderAPI_ReadFuse>

00003faa <BootloaderAPI_ReadLock_Trampoline>:
    3faa:	a3 cc       	rjmp	.-1722   	; 0x38f2 <BootloaderAPI_ReadLock>

00003fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    3fac:	a9 cc       	rjmp	.-1710   	; 0x3900 <BootloaderAPI_WriteLock>

00003fae <BootloaderAPI_UNUSED1>:
    3fae:	08 95       	ret

00003fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
    3fb0:	08 95       	ret

00003fb2 <BootloaderAPI_UNUSED3>:
    3fb2:	08 95       	ret

00003fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED1:
		ret
    3fb4:	08 95       	ret

00003fb6 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED2:
		ret
    3fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00003fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    3fe0:	df cf       	rjmp	.-66     	; 0x3fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    3fe2:	df cf       	rjmp	.-66     	; 0x3fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    3fe4:	df cf       	rjmp	.-66     	; 0x3fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    3fe6:	df cf       	rjmp	.-66     	; 0x3fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    3fe8:	df cf       	rjmp	.-66     	; 0x3fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    3fea:	df cf       	rjmp	.-66     	; 0x3faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    3fec:	df cf       	rjmp	.-66     	; 0x3fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    3fee:	df cf       	rjmp	.-66     	; 0x3fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    3ff0:	df cf       	rjmp	.-66     	; 0x3fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    3ff2:	df cf       	rjmp	.-66     	; 0x3fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    3ff4:	df cf       	rjmp	.-66     	; 0x3fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    3ff6:	df cf       	rjmp	.-66     	; 0x3fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00003ff8 <BootloaderAPI_Signatures>:
    3ff8:	00 30       	cpi	r16, 0x00	; 0
    3ffa:	00 00       	nop
    3ffc:	10 df       	rcall	.-480    	; 0x3e1e <__data_load_start+0x64>
    3ffe:	fb dc       	rcall	.-1546   	; 0x39f6 <Endpoint_ClearStatusStage+0x6>
